-- Script to automate friend requests, accept friend requests, switch servers when stuck or near other players, and send random chat messages in Roblox.

local Players = game:GetService("Players")
local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")
local LocalPlayer = Players.LocalPlayer

local checkRadius = 30
local positionCheckDelay = 180
local checkDelay = 10
local lastPosition = nil
local timeStuck = 0
local sentFriendRequests = {} -- Store UserId of those who have received requests

-- Auto send friend request function
local function autoSendFriendRequest(targetPlayer)
    if targetPlayer and not sentFriendRequests[targetPlayer.UserId] and not LocalPlayer:IsFriendsWith(targetPlayer.UserId) then
        sentFriendRequests[targetPlayer.UserId] = true -- Mark as request sent
        local success, errorMessage = pcall(function()
            LocalPlayer:RequestFriendship(targetPlayer)
        end)
        if success then
            print("Sent friend request to:", targetPlayer.Name)
        else
            print("Failed to send friend request to:", targetPlayer.Name, errorMessage)
        end
    end
end

-- Auto accept friend requests function
local function autoAcceptFriendRequests()
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player:IsFriendRequestSent() then
            local success, errorMessage = pcall(function()
                LocalPlayer:AcceptFriendRequest(player)
            end)
            if success then
                print("Accepted friend request from:", player.Name)
            else
                print("Error accepting request from:", player.Name, errorMessage)
            end
        end
    end
end

-- Continuous loop to handle friend requests
spawn(function()
    while true do
        autoAcceptFriendRequests()
        for _, player in ipairs(Players:GetPlayers()) do
            if player ~= LocalPlayer then
                autoSendFriendRequest(player)
            end
        end
        task.wait(10) -- Check for friend requests every 10 seconds
    end
end)

-- Random chat messages list
local messagesList = {
    "Hi!", "What is your name?", "How are you?", "What's up?", "Buy nick at fakervn âŠ™ com", "Hello!", "Anyone here?", "Good game!",
    "Want to team up?", "Add me as a friend!", "Let's play together!", "Can you teach me this game?", "Anyone want to chat?", "I just started, any tips?",
    "Where are you from?", "Nice to meet you!", "What's your favorite game?", "Do you like this game?", "I'm having fun!",
    "Do you want to join my squad?", "Hey, let's explore together!", "Can you show me around?", "I'm looking for a partner!",
    "Add me and let's grind together!", "Anyone up for some fun?", "Let's be friends!", "Do you need help?", "I'm here to play!",
    "Can you share some tricks?", "This game is awesome!", "Who's the best player here?"
}

-- Loop to send random chat messages
spawn(function()
    while true do 
        local waitTime = math.random(100, 300)
        task.wait(waitTime)
        local randomIndex = math.random(1, #messagesList)
        local randomMessage = messagesList[randomIndex]
        game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(randomMessage, "All")
    end
end)

-- Function to change server
local function hopToServer()
    local success, errorMessage = pcall(function()
        local url = "https://games.roblox.com/v1/games/" .. game.PlaceId .. "/servers/Public?sortOrder=Asc&limit=100"
        local response = HttpService:JSONDecode(game:HttpGet(url))
        local servers = {}
        local minPlayers = nil

        for _, server in ipairs(response.data) do
            if server.id ~= game.JobId and server.playing < server.maxPlayers then
                if minPlayers == nil or server.playing < minPlayers then
                    minPlayers = server.playing
                    servers = {server}
                elseif server.playing == minPlayers then
                    table.insert(servers, server)
                end
            end
        end

        if #servers > 0 then
            local bestServer = servers[math.random(#servers)]
            TeleportService:TeleportToPlaceInstance(game.PlaceId, bestServer.id, LocalPlayer)
        else
            TeleportService:Teleport(game.PlaceId)
        end
    end)

    if not success then
        print("Error teleporting: " .. errorMessage)
        TeleportService:Teleport(game.PlaceId)
    end
end

-- Check if stuck in position
local function checkStuck()
    local myPosition = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and LocalPlayer.Character.HumanoidRootPart.Position
    if myPosition then
        if lastPosition and (myPosition - lastPosition).Magnitude < 1 then
            timeStuck = timeStuck + checkDelay
            if timeStuck >= positionCheckDelay then
                hopToServer()
            end
        else
            timeStuck = 0
        end
        lastPosition = myPosition
    end
end

-- Main loop to handle player proximity and stuck position
spawn(function()
    while true do
        if isNearPlayer() then
            print("Player nearby detected! Switching server after 60 seconds.")
            task.wait(60) -- Delay 60 seconds before switching server
            hopToServer()
        end

        checkStuck()
        task.wait(checkDelay)
    end
end)

print("Script activated and running.")
