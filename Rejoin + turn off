local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")
local RunService = game:GetService("RunService")

local checkRadius = 50 -- Khoảng cách kiểm tra người chơi gần
local delayBeforeHop = 120 -- Thời gian chờ trước khi hop server (tính bằng giây)

local startTime = nil -- Biến để lưu thời gian bắt đầu phát hiện người chơi gần

-- Hàm kiểm tra có người chơi gần không
local function isNearPlayer()
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local playerPosition = player.Character.HumanoidRootPart.Position
            local myPosition = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and LocalPlayer.Character.HumanoidRootPart.Position
            
            if myPosition then
                local distance = (playerPosition - myPosition).Magnitude
                if distance <= checkRadius then
                    return true
                end
            end
        end
    end
    return false
end

-- Hàm hop sang server ít người
local function hopToLowPlayerServer()
    local success, result = pcall(function()
        local url = "https://games.roblox.com/v1/games/" .. game.PlaceId .. "/servers/Public?sortOrder=Asc&limit=100"
        local response = HttpService:JSONDecode(game:HttpGet(url))

        for _, server in ipairs(response.data) do
            if server.playing < server.maxPlayers and server.id ~= game.JobId then
                TeleportService:TeleportToPlaceInstance(game.PlaceId, server.id, LocalPlayer)
                return
            end
        end
    end)
end

-- Vòng lặp kiểm tra liên tục
RunService.Heartbeat:Connect(function()
    if isNearPlayer() then
        if not startTime then
            startTime = os.time() -- Ghi lại thời gian bắt đầu khi có người chơi gần
        elseif os.time() - startTime >= delayBeforeHop then
            -- Nếu đã đủ thời gian delay thì hop server
            hopToLowPlayerServer()
        end
    else
        startTime = nil -- Reset thời gian nếu không còn người chơi gần
    end
end)
